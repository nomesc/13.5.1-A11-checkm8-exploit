.text
.set map_rx, 0x1800544FC
.global _main
.align 0x10
_main:
ttbr0_hook:
    mov x6,   0x180000000
    add x6, x6,  0x1e4000
    cmp x6, x1
    b.ne patch
        stp lr, x0, [sp,#-16]!
        //bl _keep_rwx
        ldr x2, =map_rx // x2 - map_rx
        mov x0, x6      // x0 - adresa
        mov x1, 0x4000  // x1 - lungimea
        blr x2          // map_rx(x0, x1)
        ldp lr, x0, [sp], 16
        msr ttbr0_el1, x0
        isb
        ret
patch:
    // daca ajungem aici inseamna ca suntem chemati din trambulina
    msr daifset, 0xF
    mov x29, x0
    mov x28, x1

    mov x21, lr
    // x0 - adresa imaginii urmatorului stadiu
    // x1 - argumentele trimise catre ea
    bl _boot_patcher

    mov lr, x21
    ret


.global _write_ttbr0
_write_ttbr0:
    msr ttbr0_el1, x0
    isb
    ret
.global _write_ttbr0_hook
_write_ttbr0_hook:   // vrem sa ne retinem drepturile
    mov x1,   0x180000000
    add x1, x1,  0x1e4000
    br x1

.global _write_sctlr
_write_sctlr:
    msr sctlr_el1, x0
    dsb SY
    isb
    mov x1, x0
    orr x0, x0, 1
.global _write_sctlr_hook
_write_sctlr_hook:
    bic x0, x0, 0x80000
    msr sctlr_el1, x0
    dsb SY
    isb
    ret

.global _trampoline_start
_trampoline_start:
    msr daifset, 0xF
    mov x29, x0
    mov x28, x1
.global _trampoline_start_hook
_trampoline_start_hook:
    mov x4,   0x180000000
    add x4, x4,  0x1e4000
    blr x4

.global _stage
_stage:
.quad  0xABCD

.align 0x4
.global _name_string
_name_string:
.asciz "name"

.align 0x4
.global _chosen_string
_chosen_string:
.asciz "chosen"

.align 0x4
.global _memory_map_string
_memory_map_string:
.asciz "memory-map"

.align 0x4
.global ___TEXT_EXEC_string
___TEXT_EXEC_string:
.asciz "Kernel-__TEXT_EXEC"

.align 0x4
.global _new_args
_new_args:
.asciz "PE_i_can_has_debugger=1 amfi_get_out_of_my_way=1 cs_enforcement_disable=1 -v"

.align 0x4
.global _debug_enabled_string
_debug_enabled_string:
.asciz "debug-enabled"

.align 0x4
.global _teletext
_teletext:
.byte 4, 10, 17, 17, 17, 10, 4
.byte 4, 12, 4, 4, 4, 4, 14
.byte 14, 17, 1, 6, 8, 16, 31
.byte 31, 1, 2, 6, 1, 17, 14
.byte 2, 6, 10, 18, 31, 2, 2
.byte 31, 16, 30, 1, 1, 17, 14
.byte 6, 8, 16, 30, 17, 17, 14
.byte 31, 1, 2, 4, 8, 8, 8
.byte 14, 17, 17, 14, 17, 17, 14
.byte 14, 17, 17, 15, 1, 2, 12
.byte 4, 10, 17, 17, 31, 17, 17
.byte 30, 17, 17, 30, 17, 17, 30
.byte 14, 17, 16, 16, 16, 17, 14
.byte 30, 17, 17, 17, 17, 17, 30
.byte 31, 16, 16, 30, 16, 16, 31
.byte 31, 16, 16, 30, 16, 16, 16

.align 0x4
.global _rootify_thread_hook    // 5
_rootify_thread_hook:
    nop //str wzr, [x0, 0x18]
    nop //str wzr, [x0, 0x1c]
    nop //str wzr, [x0, 0x20]
    nop //str wzr, [x0, 0x68]
    nop //str wzr, [x0, 0x6c]
//  bl proc_self
.align 0x4
.global _rootify_proc_hook    // 32
_rootify_proc_hook:
    nop //str wzr, [x0, 0x30]
    nop //str wzr, [x0, 0x34]
    nop //str wzr, [x0, 0x38]
    nop //str wzr, [x0, 0x3C]
    nop //ldr x0, [x0, 0x100] // u_cred
    nop //str wzr, [x0, 0x18]
    nop //str wzr, [x0, 0x1c]
    nop //str wzr, [x0, 0x20]
    nop //str wzr, [x0, 0x28]
    nop //str wzr, [x0, 0x68]
    nop //str wzr, [x0, 0x6c]
    nop //mov w8, 1
    nop //str w8, [x0, 0x24]
    nop //ldr x0, [x0, 0x78] // daca vrem sa si scoatem din sandbox procesul
    nop //str xzr, [x0, 0x10]
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
