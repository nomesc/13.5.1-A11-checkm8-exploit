#include <stdint.h>

typedef struct Boot_Video
{
	unsigned long v_baseAddr;
	unsigned long v_display;
	unsigned long v_rowBytes;
	unsigned long v_width;
	unsigned long v_height;
	unsigned long v_depth;
} Boot_Video;

typedef struct boot_args
{
	uint16_t Revision;
	uint16_t Version;
	uint64_t virtBase;
	uint64_t physBase;
	uint64_t memSize;
	uint64_t topOfKernelData;
	Boot_Video Video;
	uint32_t machineType;
	void *deviceTreeP;
	uint32_t deviceTreeLength;
	char CommandLine[256];
	uint64_t bootFlags;
} boot_args;

typedef struct
{
	uint32_t *function;
	uint32_t *patch;
	uint32_t *address;
	uint32_t number_of_instructions;
} instruction_patch;

int32_t patch_finder(uint32_t *image, instruction_patch *patches, uint32_t number_of_patches);
//int32_t patch_finder_test(uint32_t *image, instruction_patch *patches, const uint32_t number_of_patches, uint64_t size);
int32_t mem_cmp(void *s1, void *s2, uint32_t size);
void apply_pathches(instruction_patch *patches, uint32_t number_of_patches);
void change_apple(Boot_Video Video);
void draw_status(uint64_t *x, uint64_t *y, Boot_Video Video, uint32_t fail);

// DEVICE TREE MANIPULATION

typedef struct
{
	uint32_t n_properties;
	uint32_t n_children;
} devicetree_node;

typedef struct
{
	char name[32];
	uint32_t size;
	uint8_t data[];	// proprietate generica
} devicetree_property;

typedef struct
{
	char name[32];
	uint32_t size;
	uint32_t enabled;	// proptietate cu aceasta informatie
} debug_property;

typedef struct __attribute__((packed))
{
	char name[32];
	uint32_t size;
	unsigned long paddr;
	unsigned long length;
} MemoryMapFileInfo; // o proprietate cu  aceste doua informatii

//devicetree_property *devicetree_find_property(devicetree_node **root, char *name);

//devicetree_node *devicetree_find_child(devicetree_node *root, char *name, uint64_t name_len);

//MemoryMapFileInfo *devicetree_find_memory_range(devicetree_node *root, char *name);

void print_addres(uint64_t ptr, uint64_t *x, uint64_t *y, Boot_Video *video);